<?xml version="1.0"?>
<testsuites>
  <testsuite>
    <testcase id="tests/assert_base64.hurl" time="0.215"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_header.hurl" time="0.015"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_json.hurl" time="0.026"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_match.hurl" time="0.018"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_regex.hurl" time="0.005"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_status_code.hurl" time="0.010"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/assert_xpath.hurl" time="0.005"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/basic_authentication.hurl" time="0.004"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/bom.hurl" time="0.003"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/bytes.hurl" time="0.007"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/capture_and_assert.hurl" time="0.002"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/captures.hurl" time="0.012"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/color.hurl" time="0.000"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/compressed.hurl" time="0.032"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/cookie_file.hurl" time="0.004"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/cookies.hurl" time="0.034"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/cookie_storage.hurl" time="0.010"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/delete.hurl" time="0.004"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/empty.hurl" time="0.000"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/encoding.hurl" time="0.008"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/env_var.hurl" time="0.008"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_base64.hurl" time="0.006">
      <failure>Assert Body Value
  --&gt; tests/error_assert_base64.hurl:12:8
   |
12 | base64,bGluZTEKbGluZTIKbGluZTMK;
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ actual value is &lt;hex, 6c696e65310a6c696e65320d0a6c696e65330a;&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_bytearray.hurl" time="0.015">
      <failure>Assert Failure
  --&gt; tests/error_assert_bytearray.hurl:4:0
   |
 4 | bytes equals hex,00;
   |   actual:   byte array &lt;ff&gt;
   |   expected: byte array &lt;00&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_bytearray.hurl:5:0
   |
 5 | sha256 equals hex,a8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb88;
   |   actual:   byte array &lt;a8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89&gt;
   |   expected: byte array &lt;a8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb88&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_content_encoding.hurl" time="0.004">
      <failure>Decompression Error
  --&gt; tests/error_assert_content_encoding.hurl:4:1
   |
 4 | ```Hello World!```
   | ^ Compression unknown is not supported
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_decompress.hurl" time="0.004">
      <failure>Decompression Error
  --&gt; tests/error_assert_decompress.hurl:3:1
   |
 3 | ```Hello World!```
   | ^ Could not uncompress response with gzip
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_file.hurl" time="0.003">
      <failure>Assert Body Value
  --&gt; tests/error_assert_file.hurl:8:1
   |
 8 | file,data.txt;
   | ^ actual value is &lt;hex, 48656c6c6f;&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_header_not_found.hurl" time="0.003">
      <failure>Header not Found
  --&gt; tests/error_assert_header_not_found.hurl:3:1
   |
 3 | Custom: ???
   | ^^^^^^ This header has not been found in the response
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_header_value.hurl" time="0.009">
      <failure>Assert Header Value
  --&gt; tests/error_assert_header_value.hurl:3:15
   |
 3 | Content-Type: ???
   |               ^^^ actual value is &lt;text/html; charset=utf-8&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_http_version.hurl" time="0.004">
      <failure>Assert Http Version
  --&gt; tests/error_assert_http_version.hurl:2:6
   |
 2 | HTTP/2 200
   |      ^ actual value is &lt;1.0&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_invalid_predicate_type.hurl" time="0.004">
      <failure>Assert Failure
  --&gt; tests/error_assert_invalid_predicate_type.hurl:4:0
   |
 4 | header "content-type" equals 1
   |   actual:   string &lt;text/html; charset=utf-8&gt;
   |   expected: int &lt;1&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_match_utf8.hurl" time="0.003">
      <failure>Invalid Decoding
  --&gt; tests/error_assert_match_utf8.hurl:4:1
   |
 4 | body matches ".*"
   | ^^^^ The body can not be decoded with charset 'utf-8'
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_newline.hurl" time="0.006">
      <failure>Assert Body Value
  --&gt; tests/error_assert_newline.hurl:9:4
   |
 9 | ```&lt;p&gt;Hello&lt;/p&gt;
   |    ^ actual value is &lt;&lt;p&gt;Hello&lt;/p&gt;

&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_query_cookie.hurl" time="0.009">
      <failure>Assert Failure
  --&gt; tests/error_assert_query_cookie.hurl:7:0
   |
 7 | cookie "cookie1[Secure]" equals false      # This is not valid, Secure attribute exists or not but does have a value
   |   actual:   none
   |   expected: bool &lt;false&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_query_cookie.hurl:11:0
   |
11 | cookie "cookie2[Secure]" equals true       # This is not valid, Secure attribute exists or not but does have a value
   |   actual:   unit
   |   expected: bool &lt;true&gt;
   |   &gt;&gt;&gt; types between actual and expected are not consistent
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_query_cookie.hurl:12:0
   |
12 | cookie "cookie2[Secure]" not equals true   # This is not valid, Secure attribute exists or not but does have a value
   |   actual:   unit
   |   expected: not bool &lt;true&gt;
   |   &gt;&gt;&gt; types between actual and expected are not consistent
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_query_invalid_regex.hurl" time="0.005">
      <failure>Invalid regex
  --&gt; tests/error_assert_query_invalid_regex.hurl:4:7
   |
 4 | regex "[x" exists
   |       ^^^^ Regex expression is not valid
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_query_invalid_xpath.hurl" time="0.003">
      <failure>Invalid xpath expression
  --&gt; tests/error_assert_query_invalid_xpath.hurl:4:7
   |
 4 | xpath "//" equals 1
   |       ^^^^ The xpath expression is not valid
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_status.hurl" time="0.005">
      <failure>Assert Status
  --&gt; tests/error_assert_status.hurl:2:10
   |
 2 | HTTP/1.0 200
   |          ^^^ actual value is &lt;404&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_template_variable_not_found.hurl" time="0.008">
      <failure>Undefined Variable
  --&gt; tests/error_assert_template_variable_not_found.hurl:4:33
   |
 4 | header "content-type" equals "{{content_type}}"
   |                                 ^^^^^^^^^^^^ You must set the variable content_type
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_value_error.hurl" time="0.012">
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:4:0
   |
 4 | header "content-type" equals "XXX"
   |   actual:   string &lt;text/html; charset=utf-8&gt;
   |   expected: string &lt;XXX&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:5:0
   |
 5 | header "content-type" notEquals "text/html; charset=utf-8"
   |   actual:   string &lt;text/html; charset=utf-8&gt;
   |   expected: string &lt;text/html; charset=utf-8&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:6:0
   |
 6 | jsonpath "$.id" equals "000001"
   |   actual:   none
   |   expected: string &lt;000001&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:7:0
   |
 7 | jsonpath "$.values" includes 100
   |   actual:   [int &lt;1&gt;, int &lt;2&gt;, int &lt;3&gt;]
   |   expected: includes int &lt;100&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:8:0
   |
 8 | jsonpath "$.values" not contains "Hello"
   |   actual:   [int &lt;1&gt;, int &lt;2&gt;, int &lt;3&gt;]
   |   expected: not contains string &lt;Hello&gt;
   |   &gt;&gt;&gt; types between actual and expected are not consistent
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:9:0
   |
 9 | jsonpath "$.count" greaterThan 5
   |   actual:   int &lt;2&gt;
   |   expected: greater than int &lt;5&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:10:0
   |
10 | jsonpath "$.count" isFloat
   |   actual:   int &lt;2&gt;
   |   expected: float
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_value_error.hurl:11:0
   |
11 | bytes contains hex,00;
   |   actual:   byte array &lt;7b202276616c756573223a205b312c322c335d2c2022636f756e74223a20327d&gt;
   |   expected: contains byte array &lt;00&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_variable.hurl" time="0.009">
      <failure>Assert Failure
  --&gt; tests/error_assert_variable.hurl:8:0
   |
 8 | variable "toto" equals "tata"
   |   actual:   none
   |   expected: string &lt;tata&gt;
   |</failure>
      <failure>Undefined Variable
  --&gt; tests/error_assert_variable.hurl:9:28
   |
 9 | variable "status" equals {{unknown}}
   |                            ^^^^^^^ You must set the variable unknown
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_variable.hurl:10:0
   |
10 | variable "status" equals {{type}}
   |   actual:   int &lt;200&gt;
   |   expected: string &lt;text/html; charset=utf-8&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_assert_variable.hurl:11:0
   |
11 | variable "status" equals {{length}}
   |   actual:   int &lt;200&gt;
   |   expected: string &lt;0&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_assert_xpath.hurl" time="0.010">
      <failure>Invalid xpath expression
  --&gt; tests/error_assert_xpath.hurl:4:7
   |
 4 | xpath "strong(//head/title)" equals "Welcome to Quiz!"
   |       ^^^^^^^^^^^^^^^^^^^^^^ The xpath expression is not valid
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_body_json.hurl" time="0.000">
      <error>Invalid Json
  --&gt; tests/error_body_json.hurl:3:18
   |
 3 |     "success": {{success}}
   |                  ^^^^^^^ actual value is &lt;invalid&gt;
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_connect_timeout.hurl" time="1.002">
      <error>Http Connection
  --&gt; tests/error_connect_timeout.hurl:1:5
   |
 1 | GET http://10.0.0.0
   |     ^^^^^^^^^^^^^^^ (28) Connection timeout after 1001 ms
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_file_read_access.hurl" time="0.000">
      <error>File ReadAccess
  --&gt; tests/error_file_read_access.hurl:2:6
   |
 2 | file,does_not_exist;
   |      ^^^^^^^^^^^^^^ File tests/does_not_exist can not be read
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_http_connection.hurl" time="0.015">
      <error>Http Connection
  --&gt; tests/error_http_connection.hurl:1:5
   |
 1 | GET http://unknown
   |     ^^^^^^^^^^^^^^ (6) Could not resolve host: unknown
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_invalid_jsonpath.hurl" time="0.004">
      <failure>Invalid jsonpath
  --&gt; tests/error_invalid_jsonpath.hurl:4:10
   |
 4 | jsonpath "" equals false
   |          ^^ the jsonpath expression '' is not valid
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_invalid_url.hurl" time="0.000">
      <error>Http Connection
  --&gt; tests/error_invalid_url.hurl:1:5
   |
 1 | GET ???
   |     ^^^ (3) URL using bad/illegal format or missing URL
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_invalid_xml.hurl" time="0.002">
      <failure>Invalid XML
  --&gt; tests/error_invalid_xml.hurl:4:1
   |
 4 | xpath "xx" equals 1
   | ^^^^^^^^^^ The Http response is not a valid XML
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_max_redirect.hurl" time="0.025">
      <error>Http Connection
  --&gt; tests/error_max_redirect.hurl:1:5
   |
 1 | GET http://localhost:8000/redirect/7
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Too many redirect
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_multipart_form_data.hurl" time="0.000">
      <error>File ReadAccess
  --&gt; tests/error_multipart_form_data.hurl:4:15
   |
 4 | upload1: file,unknown;
   |               ^^^^^^^ File tests/unknown can not be read
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_output_decompress.hurl" time="0.006"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_predicate.hurl" time="0.016">
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:4:0
   |
 4 | jsonpath "$.status" equals "true"
   |   actual:   bool &lt;true&gt;
   |   expected: string &lt;true&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:6:0
   |
 6 | jsonpath "$.count" equals 0
   |   actual:   int &lt;1&gt;
   |   expected: int &lt;0&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:7:0
   |
 7 | jsonpath "$.message" equals 0
   |   actual:   string &lt;0&gt;
   |   expected: int &lt;0&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:8:0
   |
 8 | jsonpath "$.empty" equals 0
   |   actual:   string &lt;&gt;
   |   expected: int &lt;0&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:9:0
   |
 9 | jsonpath "$.number" equals 1.1
   |   actual:   float &lt;1.0&gt;
   |   expected: float &lt;1.1&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:10:0
   |
10 | jsonpath "$.message" startsWith "hi"
   |   actual:   string &lt;0&gt;
   |   expected: starts with string &lt;hi&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:11:0
   |
11 | jsonpath "$.message" endsWith "hi"
   |   actual:   string &lt;0&gt;
   |   expected: ends with string &lt;hi&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:12:0
   |
12 | jsonpath "$.message" contains "hi"
   |   actual:   string &lt;0&gt;
   |   expected: contains string &lt;hi&gt;
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:13:0
   |
13 | jsonpath "$.message" matches "hi"
   |   actual:   string &lt;0&gt;
   |   expected: matches regex &lt;hi&gt;
   |</failure>
      <failure>Subquery error
  --&gt; tests/error_predicate.hurl:14:22
   |
14 | jsonpath "$.message" count == 1
   |                      ^^^^^ Type from query result and subquery do not match
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:15:0
   |
15 | jsonpath "$.toto" exists
   |   actual:   none
   |   expected: something
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:16:0
   |
16 | jsonpath "$.message" not exists
   |   actual:   string &lt;0&gt;
   |   expected: not something
   |</failure>
      <failure>Assert Failure
  --&gt; tests/error_predicate.hurl:17:0
   |
17 | jsonpath "$.list" count == 2
   |   actual:   int &lt;3&gt;
   |   expected: int &lt;2&gt;
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_query_header_not_found.hurl" time="0.004">
      <failure>Header not Found
  --&gt; tests/error_query_header_not_found.hurl:3:1
   |
 3 | Custom: XXX
   | ^^^^^^ This header has not been found in the response
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_query_invalid_json.hurl" time="0.003">
      <failure>Invalid Json
  --&gt; tests/error_query_invalid_json.hurl:4:1
   |
 4 | jsonpath "$.errors" count == 2
   | ^^^^^^^^^^^^^^^^^^^ The http response is not a valid json
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_query_invalid_utf8.hurl" time="0.002">
      <failure>Invalid Decoding
  --&gt; tests/error_query_invalid_utf8.hurl:4:1
   |
 4 | jsonpath "$.errors" count == 2
   | ^^^^^^^^^^^^^^^^^^^ The body can not be decoded with charset 'utf-8'
   |</failure>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_template_variable_not_found.hurl" time="0.000">
      <error>Undefined Variable
  --&gt; tests/error_template_variable_not_found.hurl:1:7
   |
 1 | GET {{url}}
   |       ^^^ You must set the variable url
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_template_variable_not_renderable.hurl" time="0.003">
      <error>Unrenderable Variable
  --&gt; tests/error_template_variable_not_renderable.hurl:8:11
   |
 8 | param1: {{list}}
   |           ^^^^ value [1,2,3] can not be rendered
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/error_timeout.hurl" time="1.001">
      <error>Http Connection
  --&gt; tests/error_timeout.hurl:1:5
   |
 1 | GET http://localhost:8000/timeout
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (28) Operation timed out after 1001 milliseconds with 0 bytes received
   |</error>
    </testcase>
  </testsuite>
  <testsuite>
    <testcase id="tests/expect.hurl" time="0.003"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/float.hurl" time="0.014"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/follow_redirect.hurl" time="0.014"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/form_params.hurl" time="0.007"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/headers.hurl" time="0.034"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/hello.hurl" time="0.014"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/ignore_asserts.hurl" time="0.002"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/include.hurl" time="0.002"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/large.hurl" time="8.318"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/multilines.hurl" time="0.068"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/multipart_form_data.hurl" time="0.009"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/no_entry.hurl" time="0.000"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/non_utf8.hurl" time="0.004"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/output.hurl" time="0.007"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/patch.hurl" time="0.007"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_base64.hurl" time="0.004"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_bytes.hurl" time="0.005"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_file.hurl" time="0.023"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_json.hurl" time="0.028"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_multilines.hurl" time="0.014"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/post_xml.hurl" time="0.007"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/predicates-string.hurl" time="0.016"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/proxy.hurl" time="0.040"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/put.hurl" time="0.003"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/querystring_params.hurl" time="0.015"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/redirect.hurl" time="0.015"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/subquery_count.hurl" time="0.008"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/url.hurl" time="0.022"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/user_in_url.hurl" time="0.003"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/utf8.hurl" time="0.003"/>
  </testsuite>
  <testsuite>
    <testcase id="tests/variables.hurl" time="0.018"/>
  </testsuite>
</testsuites>
